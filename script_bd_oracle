-- Tabela Users
CREATE TABLE Users (
    user_id SERIAL PRIMARY KEY,
    user_name VARCHAR(100) NOT NULL,
    email VARCHAR(50) UNIQUE NOT NULL,
    password VARCHAR(100) NOT NULL,
    type VARCHAR(20) CHECK (type IN ('admin', 'funcionário', 'parceiro')),
    benefits BOOLEAN DEFAULT FALSE,
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Tabela Tracks
CREATE TABLE Tracks (
    track_id SERIAL PRIMARY KEY,
    track_name VARCHAR(100)
);

-- Tabela Tests
CREATE TABLE Tests (
    test_id SERIAL PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    track_id INT REFERENCES tracks(track_id),
    test_number INT,
    test_grade INT,
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Tabela Expertises
CREATE TABLE Expertises (
    expertise_id SERIAL PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    track_id INT REFERENCES tracks(track_id),
    total_test_grade INT,
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


-- INSERIR NA TABELA TRACKS OS TRES TIPOS DE TRACKS (Track L&H, Track Cloud Sell, Track Cloud Service)
INSERT INTO tracks (track_name) VALUES ('Track L&H');
INSERT INTO tracks (track_name) VALUES ('Track Cloud Sell');
INSERT INTO tracks (track_name) VALUES ('Track Cloud Service');



-- Cria a função que será chamada pela trigger
CREATE OR REPLACE FUNCTION update_expertise_total_grade()
RETURNS TRIGGER AS $$
BEGIN
    -- Calcula a soma dos test_grade para o usuário e track específicos
    UPDATE expertises 
    SET total_test_grade = COALESCE((
        SELECT SUM(test_grade) 
        FROM tests 
        WHERE user_id = NEW.user_id AND track_id = NEW.track_id
    ), 0)
    WHERE user_id = NEW.user_id AND track_id = NEW.track_id;

    RETURN NULL;
END;
$$ LANGUAGE plpgsql;

-- Cria a trigger que chama a função após inserções ou atualizações na tabela tests
CREATE TRIGGER update_expertise_total_grade_trigger
AFTER INSERT OR UPDATE ON tests
FOR EACH ROW EXECUTE FUNCTION update_expertise_total_grade();




